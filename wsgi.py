#!/usr/bin/env python3
"""
WSGI/ASGI entry point for Render deployment.

Este archivo expone la aplicaci√≥n Reflex como una aplicaci√≥n ASGI
que puede ser servida por gunicorn + uvicorn en Render.
"""

import os
import sys
from pathlib import Path

# Agregar el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Configurar variables de entorno necesarias
os.environ.setdefault("REFLEX_ENV", "prod")

# Importar la aplicaci√≥n Reflex
from asistente_legal_constitucional_con_ia.asistente_legal_constitucional_con_ia import app
import reflex as rx

print("üöÄ Preparando aplicaci√≥n ASGI para Render...")

# En modo producci√≥n, Reflex necesita compilar primero
try:
    # Compilar la aplicaci√≥n para producci√≥n
    print("üîß Compilando aplicaci√≥n para producci√≥n...")
    rx.export.export(frontend=True, backend=False, zip=False)
    print("‚úÖ Frontend compilado exitosamente")
except Exception as e:
    print(f"‚ö†Ô∏è Error compilando frontend: {e}")

# Obtener la aplicaci√≥n ASGI directamente del m√≥dulo app
try:
    # En Reflex, la aplicaci√≥n ASGI est√° en app.app
    application = app.app
    print("‚úÖ Aplicaci√≥n ASGI obtenida correctamente")
except AttributeError:
    try:
        # M√©todo alternativo: usar la app directamente
        application = app
        print("‚úÖ Usando aplicaci√≥n directamente como fallback")
    except Exception as e:
        print(f"‚ùå Error obteniendo aplicaci√≥n: {e}")
        raise

# Para compatibilidad con gunicorn
app_instance = application

print("üåê Aplicaci√≥n lista para servir en Render")